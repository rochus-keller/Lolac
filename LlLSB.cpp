// Generated by OBNCPP 2019-04-09 on 2019-04-10T00:06:54
#include "LlLSB.h"
#include <memory>
using namespace Ll;

static std::auto_ptr<LSB> s_inst;

const int LSB::bit;
const int LSB::array;
const int LSB::unit;
const int LSB::const_;
const int LSB::typ;
const int LSB::var;
const int LSB::lit;
const int LSB::sel;
const int LSB::range;
const int LSB::cons;
const int LSB::repl;
const int LSB::not_;
const int LSB::and_;
const int LSB::mul;
const int LSB::div;
const int LSB::or_;
const int LSB::xor_;
const int LSB::add;
const int LSB::sub;
const int LSB::eql;
const int LSB::neq;
const int LSB::lss;
const int LSB::geq;
const int LSB::leq;
const int LSB::gtr;
const int LSB::then;
const int LSB::else_;
const int LSB::ts;
const int LSB::next;

LSB* LSB::_inst()
{
	if( s_inst.get() == 0 )
		s_inst.reset( new LSB() );
	return s_inst.get();
}

void LSB::Register(_ValArray<char> name, Object list)
{
	// BEGIN
	LSB* _this = _inst();
	_this->modname = name;
	_this->top = list;
	// END
}

LSB::LSB()
{
	// BEGIN
	bitType = new TypeDesc();
	bitType->len = 0;
	bitType->size = 1;
	integer_ = new TypeDesc();
	string = new TypeDesc();
	byteType = new ArrayTypeDesc();
	byteType->len = 8;
	byteType->size = 8;
	byteType->eltyp = bitType;
	wordType = new ArrayTypeDesc();
	wordType->len = 32;
	wordType->size = 32;
	wordType->eltyp = bitType;
	root = new ObjDesc();
	root->tag = typ;
	root->name = "WORD";
	root->type = wordType;
	root->next = 0;
	top = new ObjDesc();
	top->tag = typ;
	top->name = "BYTE";
	top->type = byteType;
	top->next = root;
	root = top;
	top = new ObjDesc();
	top->tag = typ;
	top->name = "BIT";
	top->type = bitType;
	top->next = root;
	root = top;
	// END
}

LSB::~LSB()
{
	s_inst.release();
}

