#ifndef __LlLSC_H__
#define __LlLSC_H__

// Generated by OBNCPP 2019-04-09 on 2019-04-10T00:06:54

#include <Lolac/Ll_Global.h>
#include <Lolac/LlTexts.h>
#include <Lolac/LlOberon.h>
#include <Lolac/LlLSB.h>
#include <Lolac/LlLSS.h>

namespace Ll
{
	class LSC : public _Root
	{
	public:
		/* Lola System Compiler, NW 8.1.95 / 27.8.2018 for RISC (LSCX) */
		static LSC* _inst();
		LSC();
		~LSC();

		// VAR
		int sym;
		/* used at end of Unit */
		bool err;
		LSB::Object top;
		LSB::Object bot;
		LSB::Object undef;
		/* to avoid forward references */
		void (*factor)(LSB::Item&);
		void (*expression)(LSB::Item&);
		void (*Unit)(LSB::Object&);
		Texts::Writer W;

		// PROC
		static void Err(int n);
		int Log(int m);
		LSB::Item New(int tag, LSB::Item a, LSB::Item b);
		LSB::Object NewObj(int class_);
		LSB::Object ThisObj(_ValArray<char> id);
		static void CheckTypes(LSB::Item x, LSB::Item y, LSB::Item z);
		static void selector(LSB::Item& x);
		static void elem(LSB::Item& x, int& len);
		static void constructor_(LSB::Item& x);
		static void factor0(LSB::Item& x);
		static void term(LSB::Item& x);
		static void SimpleExpression(LSB::Item& x);
		static void UncondExpression(LSB::Item& x);
		static void expression0(LSB::Item& x);
		static void CheckAssign(LSB::Item x, LSB::Item y);
		static void Param(LSB::Object fpar, LSB::Item& apar);
		static void Statement();
		static void StatSequence();
		static void ConstDeclaration();
		static void Type0(LSB::Type& type);
		static void TypeDeclaration();
		static void VarList(int kind, LSB::Item clk);
		static void ParamList();
		static void Traverse(LSB::Item x);
		static void Unit0(LSB::Object& locals);
		static void Module(Texts::Text T, int pos);
		static void Compile();

	};
}

#endif // __LlLSC_H__